"use client";

import { ChatContact, Message } from "@/utils/types/chat";
import { useCallback, useState } from "react";

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content:
        "Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, h·ªó tr·ª£ c√¥ng vi·ªác, ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† tr√≤ chuy·ªán. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      sender: "bot",
      timestamp: new Date(Date.now() - 300000),
      status: "read",
    },
  ]);

  const [isTyping, setIsTyping] = useState(false);
  const [contacts] = useState<ChatContact[]>([
    {
      id: "1",
      name: "AI Assistant",
      avatar: "ü§ñ",
      status: "online",
      lastMessage: "Xin ch√†o! T√¥i l√† AI Assistant...",
      lastMessageTime: new Date(Date.now() - 300000),
      unreadCount: 0,
    },
    {
      id: "2",
      name: "Support Team",
      avatar: "üë•",
      status: "online",
      lastMessage: "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi ch√∫ng t√¥i",
      lastMessageTime: new Date(Date.now() - 3600000),
      unreadCount: 2,
    },
    {
      id: "3",
      name: "Sales Department",
      avatar: "üíº",
      status: "away",
      lastMessage: "Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t",
      lastMessageTime: new Date(Date.now() - 7200000),
      unreadCount: 0,
    },
    {
      id: "4",
      name: "Technical Support",
      avatar: "üîß",
      status: "busy",
      lastMessage: "V·∫•n ƒë·ªÅ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n",
      lastMessageTime: new Date(Date.now() - 86400000),
      unreadCount: 1,
    },
  ]);

  const botResponses = [
    "C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! T√¥i ƒë√£ hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n v√† s·∫Ω c·ªë g·∫Øng tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt nh·∫•t c√≥ th·ªÉ.",
    "ƒê√≥ l√† m·ªôt c√¢u h·ªèi r·∫•t th√∫ v·ªã! D·ª±a tr√™n kinh nghi·ªám v√† ki·∫øn th·ª©c c·ªßa t√¥i, t√¥i c√≥ th·ªÉ ƒë∆∞a ra m·ªôt s·ªë g·ª£i √Ω h·ªØu √≠ch cho b·∫°n.",
    "T√¥i hi·ªÉu v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i. H√£y ƒë·ªÉ t√¥i ph√¢n t√≠ch t√¨nh hu·ªëng v√† ƒë∆∞a ra gi·∫£i ph√°p ph√π h·ª£p nh·∫•t.",
    "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m chi ti·∫øt c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n ch√≠nh x√°c h∆°n kh√¥ng?",
    "D·ª±a tr√™n th√¥ng tin b·∫°n cung c·∫•p, t√¥i nghƒ© c√≥ m·ªôt s·ªë c√°ch ti·∫øp c·∫≠n kh√°c nhau m√† ch√∫ng ta c√≥ th·ªÉ th·ª≠ nghi·ªám.",
    "ƒê√¢y l√† m·ªôt ch·ªß ƒë·ªÅ kh√° ph·ª©c t·∫°p. T√¥i s·∫Ω c·ªë g·∫Øng gi·∫£i th√≠ch m·ªôt c√°ch ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu nh·∫•t.",
    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi v·∫•n ƒë·ªÅ n√†y. Tr∆∞·ªõc ti√™n, h√£y c√πng t√¥i xem x√©t c√°c y·∫øu t·ªë quan tr·ªçng.",
  ];

  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      sender: "user",
      timestamp: new Date(),
      status: "sending",
    };

    setMessages((prev) => [...prev, userMessage]);

    // Update message status to sent
    setTimeout(() => {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === userMessage.id ? { ...msg, status: "sent" as const } : msg
        )
      );
    }, 500);

    // Update to delivered
    setTimeout(() => {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === userMessage.id
            ? { ...msg, status: "delivered" as const }
            : msg
        )
      );
    }, 1000);

    // Show typing indicator
    setIsTyping(true);

    // Simulate bot response
    setTimeout(() => {
      const randomResponse =
        botResponses[Math.floor(Math.random() * botResponses.length)];

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: randomResponse,
        sender: "bot",
        timestamp: new Date(),
        status: "delivered",
      };

      setMessages((prev) => [...prev, botMessage]);
      setIsTyping(false);

      // Mark user message as read
      setTimeout(() => {
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === userMessage.id
              ? { ...msg, status: "read" as const }
              : msg
          )
        );
      }, 1000);
    }, 1500 + Math.random() * 2000);
  }, []);

  return {
    messages,
    contacts,
    isTyping,
    sendMessage,
  };
}
