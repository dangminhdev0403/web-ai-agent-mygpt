"use client";

import { getHistory, sendChatBox } from "@/app/actions/chat.action";
import { ChatContact, Message } from "@/utils/types/chat";
import { useCallback, useState } from "react";

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      content:
        "Xin ch√†o! T√¥i l√† Tr·ª£ l√≠ ƒê·∫∑t Xe R·∫ª. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, h·ªó tr·ª£ c√¥ng vi·ªác, ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† tr√≤ chuy·ªán. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      sender: "bot",
      timestamp: new Date(Date.now() - 300000),
      status: "read",
    },
  ]);

  const [isTyping, setIsTyping] = useState(false);
  const [contacts] = useState<ChatContact[]>([
    {
      id: "1",
      name: "Tr·ª£ l√≠ ƒê·∫∑t Xe R·∫ª",
      avatar: "ü§ñ",
      status: "online",
      lastMessage: "Xin ch√†o! T√¥i l√† Tr·ª£ l√≠ ƒê·∫∑t Xe R·∫ª...",
      lastMessageTime: new Date(Date.now() - 300000),
      unreadCount: 0,
    },
  ]);

  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      sender: "user",
      timestamp: new Date(),
      status: "sending",
    };

    setMessages((prev) => [...prev, userMessage]);

    // Update message status to sent
    setTimeout(() => {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === userMessage.id ? { ...msg, status: "sent" as const } : msg
        )
      );
    }, 500);

    // Update to delivered
    setTimeout(() => {
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === userMessage.id
            ? { ...msg, status: "delivered" as const }
            : msg
        )
      );
    }, 1000);

    // Show typing indicator
    setIsTyping(true);
    const res = await sendChatBox(content);

    // Simulate bot response
    setTimeout(() => {
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: res?.answer,
        sender: "bot",
        timestamp: new Date(),
        status: "delivered",
      };

      setMessages((prev) => [...prev, botMessage]);
      setIsTyping(false);

      // Mark user message as read
      setTimeout(() => {
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === userMessage.id
              ? { ...msg, status: "read" as const }
              : msg
          )
        );
      }, 1000);
    }, 1500 + Math.random() * 2000);
  }, []);
  const getHistoryChat = useCallback(async () => {
    const history = await getHistory();

    const formatted: Message[] = history.map((msg, idx) => ({
      id: `${msg.timestamp}-${idx}`, // ƒë·∫£m b·∫£o unique id
      content: msg.content,
      sender: msg.sender,
      timestamp: new Date(msg.timestamp * 1000), // convert UNIX to Date
      status: "read", // v√¨ l√† tin c≈© n√™n ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
    }));

    setMessages((prev) => [
      ...prev.filter((m) => m.id === "welcome"), // gi·ªØ welcome n·∫øu mu·ªën
      ...formatted,
    ]);
  }, []);

  return {
    messages,
    contacts,
    isTyping,
    sendMessage,
    getHistoryChat,
  };
}
